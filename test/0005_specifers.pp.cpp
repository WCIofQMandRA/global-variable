//Author: 张子辰
//This file is in public domain.
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <random>
using namespace std;

int main()
{
	vector<string> spec={"extern","static","const","volatile","thread_local"};
	mt19937_64 rand64;
	rand64.seed(random_device()());
	ofstream test("0005.pp.cpp",ios_base::binary),ans("0005.pp.ans",ios_base::binary);
	test<<R"(//This file is generated by 0005_specifers.pp.gen.cpp.
#define ____SGV_SHOW_PP_RESULT
#include <global_variable.hpp>

____SGV_PP_CHECK_BEGIN)"<<endl;
	for(uint32_t i=0;i<32;++i)
	{
		vector<string> s;
		ans<<"____SGV_GV";
		for(int j=0;j<5;++j)
		{
			if(i&1<<j)
			{
				s.emplace_back(spec[j]);
				ans<<'1';
			}
			else ans<<'0';
		}
		shuffle(s.begin(),s.end(),rand64);
		test<<"global_variable(";
		if(s.size())
		{
			test<<s[0];
			for(auto j=s.begin()+1;j!=s.end();++j)
				test<<(rand64()%2?" ":"\t")<<*j;
			test<<",";
		}
		if(rand64()%2)
		{
			test<<"int,a)\n";
			ans<<"_ARG2(int,a)\n";
		}
		else
		{
			test<<"int,a,1)\n";
			ans<<"_ARG3(int,a,1)\n";
		}
	}
	test<<"____SGV_PP_CHECK_END"<<endl;
	test.close();
	ans.close();
}